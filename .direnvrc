__getnodebinpath() {
  local targetversion="$1"
  local nodedir="$N_PREFIX/n/versions/node"
  local latest=$(ls "$nodedir" | egrep "^$targetversion.*$" | sort --version-sort | tail -n 1)
  local nodebinpath="$nodedir/$latest/bin"

  if [ ! -d "$nodebinpath" ]; then
    echo "Downloading node $targetversion via n ..." >&2
    currentnodeversion=$(node --version)
    n $targetversion >&2
    n $currentnodeversion >&2
    latest=$(ls "$nodedir" | egrep "^$targetversion.*$" | sort --version-sort | tail -n 1)
    nodebinpath="$nodedir/$latest/bin"
  fi

  echo "$nodebinpath"
}

__get_alias_path() {
  echo "$HOME/.config/direnv/aliases"
}

# modified from https://github.com/direnv/direnv/issues/73#issuecomment-1242969787
__export_alias() {
  local name=$1
  shift
  local alias_dir="$(__get_alias_path)"
  local target="$alias_dir/$name"
  local old_path="$PATH"

  mkdir -p "$alias_dir"

  echo "#!/usr/bin/env bash" > "$target"
  echo "PATH=$old_path" >> "$target"
  echo "$@" >> "$target"
  chmod +x "$target"
}

__rtx_path_add() {
  local env_path="env_path = [ \"$1\" ]"

  if [ ! -f .rtx.toml ]; then
    printf '%s\n' "$env_path" > .rtx.toml
  else
    if ! grep "env_path" .rtx.toml; then
      printf '%s\n\n%s\n' "$env_path" "$(cat .rtx.toml)" > .rtx.toml
    fi
  fi
}

use_bun() {
  local version="$1"
  if [ ! -z $version ]; then
    use_node $version
  fi

  __export_alias npm 'bun "$@"'
  __export_alias yarn 'bun "$@"'

  if command -v rtx > /dev/null; then
    rtx use --path .rtx.toml bun@latest
  fi

  __rtx_path_add "$(__get_alias_path)"
  PATH_add "$(__get_alias_path)"
}


use_pnpm() {
  layout_node
  local version="$1"
  if [ ! -z $version ]; then
    use_node $version
  fi

  __export_alias npm 'pnpm "$@"'
  __export_alias yarn 'pnpm "$@"'

  if command -v rtx > /dev/null; then
    rtx use --path .rtx.toml pnpm@latest
  fi

  __rtx_path_add "$(__get_alias_path)"
  PATH_add "$(__get_alias_path)"
}

use_node() {
  layout_node
  local version="$1"

  local NPM_BIN_PATH=""

  # place global npm dir in path if present
  if [ -d "$HOME/local/npm/bin" ]; then
    NPM_BIN_PATH="$HOME/local/npm/bin"
  fi

  if [ ! -z $NODE_VERSION_PREFIX ] && [ ! -z $NODE_VERSIONS ]; then
    local mv=`echo $version | cut -d. -f1`
    local folder="$NODE_VERSIONS/$NODE_VERSION_PREFIX$mv"

    if [ -d "$folder" ] && [ -f "$folder/bin/node" ]; then
      export PATH=$PATH:$NPM_BIN_PATH:$folder/bin
      export ENVROOT="$folder"
      return 0
    fi
  fi

  if command -v rtx > /dev/null; then
    rtx use --path .rtx.toml "node@$version"
    export PATH=$PATH:$NPM_BIN_PATH
    return 0
  fi

  local NODE_BIN_PATH="$(__getnodebinpath $version)"

  export PATH=$PATH:$NPM_BIN_PATH:$NODE_BIN_PATH
}

use_python() {
  local version="$1"

  if command -v rtx > /dev/null; then
    rtx use --path .rtx.toml "python@$version"
    return 0
  fi

  echo "[~/.direnvrc] use python is not supported"
  return 1
}
