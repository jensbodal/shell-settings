{
  "task": {
    "primary": "Research and propose a proof-of-concept for building a simple service that proxies calls for other MCP servers",
    "secondary": "Design a plan for building our own simple MCP servers, with at least one being agentic, one being simple, and one being backed by an Ollama LLM"
  },
  "context": {
    "background": "You are a senior developer at Amazon looking to leverage internal MCP servers more effectively and set up local proxy and agentic behavior for local processing/transformations/RAG before interacting with an LLM",
    "technical_environment": {
      "internal_resources": "Access to Amazon internal MCP servers and tooling",
      "local_environment": "Development environment with ability to run Python, JavaScript, and other necessary languages for MCP server implementation"
    },
    "packages_to_analyze": [
      {
        "name": "awesome-mcp-clients",
        "url": "https://github.com/punkpeye/awesome-mcp-clients",
        "description": "A curated list of Model Context Protocol (MCP) clients"
      },
      {
        "name": "smolagents",
        "url": "https://github.com/huggingface/smolagents",
        "description": "A library for running powerful agents in a few lines of code with first-class support for Code Agents"
      },
      {
        "name": "llm-functions",
        "url": "https://github.com/sigoden/llm-functions",
        "description": "A project for building LLM tools and agents using familiar languages like Bash, JavaScript, and Python"
      },
      {
        "name": "llm-functions/mcp/bridge",
        "url": "https://github.com/sigoden/llm-functions/tree/main/mcp/bridge",
        "description": "A bridge that allows external MCP tools to be used by LLM-Functions"
      },
      {
        "name": "aichat",
        "url": "https://github.com/sigoden/aichat",
        "description": "All-in-one LLM CLI tool featuring Shell Assistant, CMD & REPL Mode, RAG, AI Tools & Agents"
      },
      {
        "name": "emcee",
        "url": "https://github.com/loopwork-ai/emcee",
        "description": "A tool that provides an MCP server for any web application with an OpenAPI specification"
      },
      {
        "name": "whisper.cpp",
        "url": "https://github.com/ggml-org/whisper.cpp",
        "description": "High-performance inference of OpenAI's Whisper automatic speech recognition model"
      },
      {
        "name": "llama_index",
        "url": "https://github.com/run-llama/llama_index",
        "description": "A data framework for LLM applications with data connectors and advanced retrieval interfaces"
      },
      {
        "name": "ollama",
        "url": "https://github.com/ollama/ollama",
        "description": "Get up and running with large language models locally"
      }
    ]
  },
  "exemplars": {
    "mcp_server_implementation": "The emcee project demonstrates how to create an MCP server from an OpenAPI specification, which could serve as a model for our simple MCP server implementation",
    "mcp_bridge": "The llm-functions/mcp/bridge shows how to connect external MCP tools to be used by LLM-Functions, which is relevant for our proxy service",
    "agentic_behavior": "The smolagents library provides examples of implementing agentic behavior with code agents that could be adapted for our agentic MCP server"
  },
  "persona": {
    "role": "Senior Developer",
    "expertise": ["GenAI", "LLM Integration", "System Architecture", "Amazon Internal Tools"],
    "goals": [
      "Understand current tooling for building with generative AI libraries",
      "Leverage internal MCP servers more effectively",
      "Set up local proxy and agentic behavior for preprocessing before LLM interaction",
      "Build a proof-of-concept for a simple MCP proxy service"
    ]
  },
  "format": {
    "structure": [
      "1. Executive Summary",
      "2. Package Analysis",
      "3. Architecture Overview (with sequence diagram)",
      "4. Implementation Plan",
      "5. Proof-of-Concept Design",
      "6. Recommendations for Internal Amazon Use Cases"
    ],
    "output_type": "Technical proposal with diagrams and code snippets"
  },
  "tone": {
    "style": "Technical and analytical",
    "formality": "Professional but approachable",
    "audience": "Technical team members familiar with AI concepts"
  },
  "constraints": {
    "focus": "Practical implementation rather than theoretical concepts",
    "scope": "Limited to the packages mentioned and their direct applications",
    "security": "Consider Amazon's security requirements for handling data and models"
  }
}

