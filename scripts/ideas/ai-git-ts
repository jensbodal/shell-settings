#!/usr/bin/env bun

import { exec, spawn } from 'child_process';
import { promisify } from 'util';
import { readFile, writeFile, mkdir, readdir, stat } from 'fs/promises';
import { join, basename, resolve } from 'path';
import { homedir } from 'os';

const execAsync = promisify(exec);

const CONFIG = {
  numCommits: 100,
  previewLines: 11,
  filePattern: /\.(jsx?|tsx?|mjsx?|cjsx?|py|cpp|c|h|java|html|css|go|rs|sh|json|yaml|yml|xml|md)$/
};

// ... types remain the same ...

async function findWorkspaceRoot(startDir: string): Promise<string> {
  console.log('Searching for workspace root...');
  let currentDir = resolve(startDir);
  const root = process.platform === 'win32' ? currentDir.split(':')[0] + ':\\' : '/';

  while (currentDir !== root) {
    try {
      const potentialPackageInfoDir = resolve(currentDir, '../..');
      const files = await readdir(potentialPackageInfoDir);

      if (files.includes('packageInfo')) {
        if (basename(resolve(currentDir, '..')) === 'src') {
          const srcDir = resolve(currentDir, '..');
          console.log(`Found workspace root at: ${srcDir}`);
          return srcDir;
        }
      }
    } catch (err) {
      // Continue if we can't read a directory
    }
    currentDir = resolve(currentDir, '..');
  }
  throw new Error('No workspace root (src directory with packageInfo) found');
}

async function findGitPackages(wsRoot: string): Promise<string[]> {
  console.log('Searching for git packages in workspace...');

  const findProcess = spawn('find', ['.', '-type', 'd', '-name', '.git'], {
    cwd: wsRoot
  });

  const packages: string[] = [];
  let foundCount = 0;

  return new Promise((resolve, reject) => {
    findProcess.stdout.on('data', (data) => {
      const paths = data.toString().trim().split('\n').filter(Boolean);
      paths.forEach(gitDir => {
        // First resolve the .git directory path relative to workspace root
        const fullGitPath = join(wsRoot, gitDir);
        // Then get its parent directory which is the package root
        const pkgPath = join(fullGitPath, '..');
        packages.push(pkgPath);
        foundCount++;
        console.log(`  Found package (${foundCount}): ${basename(pkgPath)}`);
      });
    });

    findProcess.stderr.on('data', (data) => {
      console.error(`  Search error: ${data}`);
    });

    findProcess.on('close', (code) => {
      if (code === 0) {
        console.log(`\nCompleted search: found ${packages.length} packages`);
        resolve(packages);
      } else {
        reject(new Error(`Package search failed with code ${code}`));
      }
    });
  });
}

async function getGitRoot(): Promise<string> {
  const { stdout } = await execAsync('git rev-parse --show-toplevel');
  return stdout.trim();
}

async function getCommitHistory(count: number, packageName: string): Promise<CommitInfo[]> {
  console.log(`Fetching last ${count} commits for ${packageName}...`);
  const { stdout } = await execAsync(
    `git log -n ${count} --pretty=format:'{"hash": "%H", "author": "%an", "email": "%ae", "date": "%ad", "message": "%s", "parents": "%P"}'`
  );
  return stdout.split('\n').map(line => JSON.parse(line));
}

async function getMatchingFiles(): Promise<string[]> {
  console.log('Finding matching source files...');
  const { stdout } = await execAsync('git ls-files');
  const files = stdout
    .split('\n')
    .filter(file => CONFIG.filePattern.test(file))
    .map(file => resolve(file));
  console.log(`Found ${files.length} matching files`);
  return files;
}

async function processFile(file: string, includeContent = true): Promise<FileInfo> {
  const stats = await stat(file);

  if (includeContent) {
    const content = await readFile(file);
    return {
      file,
      content: content.toString('base64'),
      lastModified: stats.mtime.toISOString()
    };
  }

  return {
    file,
    lastModified: stats.mtime.toISOString()
  };
}

async function processRepo(repoPath: string, includeContent = true): Promise<RepoExport> {
  const packageName = basename(repoPath);
  console.log(`\nProcessing repository: ${packageName}`);
  process.chdir(repoPath);
  console.log(`Changed directory to: ${repoPath}`);

  const commits = await getCommitHistory(CONFIG.numCommits, packageName);
  const files = await getMatchingFiles();

  console.log(`Processing ${files.length} files...`);
  const fileInfos = await Promise.all(
    files.map(async (file, index) => {
      const result = await processFile(file, includeContent);
      if ((index + 1) % 10 === 0) {
        console.log(`  Progress: ${index + 1}/${files.length} files processed`);
      }
      return result;
    })
  );

  console.log(`Completed processing ${packageName}`);
  return {
    commits,
    files: fileInfos,
    package: packageName
  };
}

async function main() {
  const args = process.argv.slice(2);
  const isWorkspace = args.includes('ws');

  if (isWorkspace) {
    console.log('Starting workspace export...');
    const currentDir = process.cwd();
    console.log(`Current directory: ${currentDir}`);

    const wsRoot = await findWorkspaceRoot(currentDir);
    const packages = await findGitPackages(wsRoot);

    const tmpDir = join(homedir(), '.ss/ai-git/workspace');
    await mkdir(tmpDir, { recursive: true });
    console.log(`Created output directory: ${tmpDir}`);

    console.log('\nProcessing all packages...');
    const exports = await Promise.all(
      packages.map(pkg => processRepo(pkg, false))
    );

    const outputFile = join(tmpDir, 'workspace_export.json');
    await writeFile(outputFile, JSON.stringify({ repositories: exports }, null, 2));

    console.log('\nExport Summary:');
    console.log(`- Processed ${packages.length} packages`);
    console.log(`- Export created at: ${outputFile}`);
    console.log('Workspace export completed successfully.');
  } else {
    console.log('Starting single repository export...');
    const gitRoot = await getGitRoot();
    process.chdir(gitRoot);
    console.log(`Changed directory to git root: ${gitRoot}`);

    const tmpDir = join(homedir(), '.ss/ai-git', basename(gitRoot));
    await mkdir(tmpDir, { recursive: true });
    console.log(`Created output directory: ${tmpDir}`);

    const repoExport = await processRepo(gitRoot);
    const outputFile = join(tmpDir, 'git_export.json');
    await writeFile(outputFile, JSON.stringify(repoExport, null, 2));

    console.log('\nPreview of export:');
    const outputStr = JSON.stringify(repoExport, null, 2);
    const lines = outputStr.split('\n');
    console.log([
      ...lines.slice(0, CONFIG.previewLines),
      '...',
      ...lines.slice(-CONFIG.previewLines)
    ].join('\n'));

    console.log(`\nExport created at: ${outputFile}`);
    console.log('Single repository export completed successfully.');
  }
}

main().catch(error => {
  console.error('Error:', error.message);
  process.exit(1);
});
